<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UserAPI</name>
    </assembly>
    <members>
        <member name="M:UserAPI.Controllers.ElasticsearchControllers.ElasticsearchTestController.SaveData(UserAPI.Models.ElasticsearchModel.SaveData{System.String})">
            <summary>Save data use database elasticsearch</summary>
            <param name="data">data that you want to save</param>
            <response code="200">return notice</response>
            <response code="400">if get mistake</response>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.ElasticsearchControllers.ElasticsearchTestController.QueryData(Nest.Id)">
            <summary>query data from elasticsearch</summary>
            <param name="id">the id of data you want to query</param>
            <response code="200">return notice</response>
            <response code="400">if get mistake</response>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.BudgetController.CreateNewBudget(System.String,UserAPI.Models.MongoModel.NewBudgetInfo)">
            <summary>
            Create New budget
            </summary>
            <remarks>Create New budget</remarks>
            <param name="walletId">The wallet id that contain budget</param>
            <param name="newBudget">The new bidget information</param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.BudgetController.GetBudgetById(System.String)">
            <summary>
            Get budget by id
            </summary>
            <param name="budgetId">the id of budget</param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.BudgetController.GetBudgetsByWallet(System.String,System.String)">
            <summary>
            get all budget in specified wallet
            </summary>
            <param name="walletId">The id of wallet</param>
            <param name="categories">the budget category</param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.CategoryController.CreateNewCategory(UserAPI.Models.MongoModel.NewCategoryInfo)">
            <summary>
            
            </summary>
            <param name="newCategory"></param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.CategoryController.GetCategoryById(System.String)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.CategoryController.GetListCategories">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.CurrencyController.CreateNewCurrency(UserAPI.Models.MongoModel.NewCurrencyInfo)">
            <summary>
            
            </summary>
            <param name="newCurrency"></param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.IconController.CreateNewIcon(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.TransactionController.CreateNewTransaction(System.String,UserAPI.Models.MongoModel.NewTransactionInfo)">
            <summary>Create new transaction</summary>
            <remarks>create new transaction</remarks>
            <param name="newTransaction">The instance representing new transaction</param>
            <param name="walletId"></param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.TransactionController.GetTransactionById(System.String)">
            <summary>
            
            </summary>
            <param name="transactionId"></param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.TransactionController.GetTransactionsByWallet(System.String,UserAPI.Models.MongoModel.GetTransactionInfo)">
            <summary>
            
            </summary>
            <param name="fields"></param>
            <param name="transactionInfo"></param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.TransactionController.UpdateTransaction(System.String,UserAPI.Models.MongoModel.UpdateTransactionInfo)">
            <summary>
            
            </summary>
            <param name="transactionId"></param>
            <param name="updateTransaction"></param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.UserController.Login(UserAPI.Models.MongoModel.UserLoginInfo)">
            <summary>login</summary>
            <remarks>login</remarks>
            <returns></returns>
            <response code="200">return the new access token or annount already login</response>
            <response code="400">Bad Request</response>
            <response code="401">username or password is wrong</response>
            <response code="403">This account is enable to login</response>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.UserController.Logout">
            <summary>logout</summary>
            <remarks>logout</remarks>
            <returns></returns>
            <response code="200">reset access token</response>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.UserController.CreateNewUser(UserAPI.Models.MongoModel.NewUserInfo)">
            <summary>create new user</summary>
            <remarks>create new user</remarks>
            <param name="newUser">the information of new user you want to add in your database</param>
            <returns></returns>
            <response code="200">return infomation of new user</response>
            <response code="400">if get mistake</response>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.UserController.GetUserById(System.String,System.String)">
            <summary>get user by id</summary>
            <remarks>get user by id</remarks>
            <param name="userId">the id of user you want to get</param>
            <param name="fields">the specified fields you want to get</param>
            <returns></returns>
            <response code="200">return infomation of user with specified fields</response>
            <response code="400">if get mistake</response>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.UserController.GetCurrentUser">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.UserController.GetListUser(System.Int32,System.Int32,System.String)">
            <summary>get list users</summary>
            <remarks>get list users</remarks>
            <param name="pageIndex">the page index you want to get</param>
            <param name="pageSize">the user per page you want to set</param>
            <param name="fields">the specified fields you want to get</param>
            <returns></returns>
            <response code="200">return infomation of list user with pagination</response>
            <response code="400">if get mistake</response>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.UserController.UpdateUser(UserAPI.Models.MongoModel.UpdateUserInfo,System.String,System.String)">
            <summary>update user</summary>
            <remarks>update user</remarks>
            <returns></returns>
            <param name="updateUser">the info used to update</param>
            <param name="oldPassword">the confirm password to update</param>
            <param name="oldUsername">the confirm username to update</param>
            <response code="200">return infomation of user you updated</response>
            <response code="400">if get mistake</response>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.UserController.DeleteUser">
            <summary>delete user</summary>
            <remarks>delete user</remarks>
            <returns></returns>
            <response code="200">return infomation of user you deleted</response>
            <response code="400">if get mistake</response>
            <response code="401">You not allow to action</response>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.WalletController.CreateNewWallet(UserAPI.Models.MongoModel.NewWalletInfo)">
            <summary>
            
            </summary>
            <param name="newWallet"></param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.WalletController.GetWalletById(System.String)">
            <summary>
            
            </summary>
            <param name="walletId"></param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.WalletController.GetWalletByUser">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.MongoControllers.WalletController.UpdateWallet(System.String,UserAPI.Models.MongoModel.UpdateWalletInfo)">
            <summary>
            
            </summary>
            <param name="walletId"></param>
            <param name="updateWallet"></param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.SQLControllers.EmployeeController.CreateNewEmployee(UserAPI.Models.SQLServerModel.InsertEmployeeInfo)">
            <summary>Create New Employee</summary>
            <remarks>Create New Employee</remarks>
            <param name="newEmployee"></param>
            <returns></returns>
            <response code="200">return infomation of new user</response>
            <response code="400">if get mistake</response>
        </member>
        <member name="M:UserAPI.Controllers.SQLControllers.EmployeeController.GetEmployeeByUsername(System.String,System.String)">
            <summary>Get Employee By Username</summary>
            <remarks>Get Employee By Username</remarks>
            <param name="username">the username of employee you want to get</param>
            <param name="fields">the specified fields you want to get</param>
            <response code="200">return infomation of user with specified fields</response>
            <response code="400">if get mistake</response>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Controllers.SQLControllers.EmployeeController.GetListEmployees(System.Int32,System.Int32,System.String)">
            <summary>Get List Employee</summary>
            <remarks>Get List Employee</remarks>
            <param name="pageIndex">the page index you want to get</param>
            <param name="pageSize">the user per page you want to set</param>
            <param name="fields">the specified fields you want to get</param>
            <returns></returns>
            <response code="200">return infomation of list employees</response>
            <response code="400">if get mistake</response>
        </member>
        <member name="M:UserAPI.Controllers.SQLControllers.EmployeeController.UpdateEmployee(System.Int32,UserAPI.Models.SQLServerModel.InsertEmployeeInfo)">
            <summary>Update Employee</summary>
            <remarks>Update Employee</remarks>
            <param name="employeeId"></param>
            <param name="updateEmployee"></param>
            <returns></returns>
            <response code="200">return infomation of updated employee</response>
            <response code="400">if get mistake</response>
        </member>
        <member name="M:UserAPI.Controllers.SQLControllers.EmployeeController.DeleteEmployee(System.Int32)">
            <summary>Delete Employee</summary>
            <remarks>Delete Employee</remarks>
            <param name="employeeId"></param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Helper.CalcuteSHA256Hash(System.String)">
            <summary>
            
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Helper.SplipFields(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="fields"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:UserAPI.Helper.ConvertStringToTime(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
    </members>
</doc>
